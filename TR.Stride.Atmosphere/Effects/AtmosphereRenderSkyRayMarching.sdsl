

shader AtmosphereRenderSkyRayMarching<bool FastSkyEnabled, bool FastAerialPerspectiveEnabled, bool RenderSunDisk, bool MultiScatteringApproximationEnabled, bool EnableClouds, MemberName AtmosphereGroup>
: ShaderBase, AtmosphereFullscreenTriangle, Math, DepthBase, AtmosphereRenderSkyCommon<MultiScatteringApproximationEnabled, AtmosphereGroup>, AtmosphereGetSunLuminence<RenderSunDisk, AtmosphereGroup>, AtmosphereClouds<AtmosphereGroup>
{
	struct RayMarchPixelOutputStruct
	{
		float4 Luminance;
	};

	RayMarchPixelOutputStruct _PSMain()
	{
		RayMarchPixelOutputStruct output = (RayMarchPixelOutputStruct)0;

		float2 pixPos = streams.ShadingPosition.xy;
		AtmosphereParameters Atmosphere = GetAtmosphereParameters();

		float3 ClipSpace = float3((pixPos / float2(Resolution))*float2(2.0, -2.0) - float2(1.0, -1.0), 1.0);
		float4 HPos = mul(float4(ClipSpace, 1.0), InvViewProjectionMatrix);

		float3 WorldDir = normalize((HPos.xyz / HPos.w) - CameraPositionWS);
		float3 WorldPos = (CameraPositionWS * ScaleToSkyUnit + float3(0, Atmosphere.BottomRadius, 0));

		float DepthBufferValue = -1.0;

		float viewHeight = length(WorldPos);
		float3 L = 0;
		DepthBufferValue = DepthStencil[pixPos].r;

		if (FastSkyEnabled || RenderStage == 1)
		{
			if ((viewHeight < Atmosphere.TopRadius && DepthBufferValue == 1.0f ) || RenderStage == 1)
			{
				float2 uv;
				float3 UpVector = normalize(WorldPos);
				float viewZenithCosAngle = dot(WorldDir, UpVector);

				float3 sideVector = normalize(cross(UpVector, WorldDir));		// assumes non parallel vectors
				float3 forwardVector = normalize(cross(sideVector, UpVector));	// aligns toward the sun light but perpendicular to up vector
				float2 lightOnPlane = float2(dot(SunDirection, forwardVector), dot(SunDirection, sideVector));
				lightOnPlane = normalize(lightOnPlane);
				float lightViewCosAngle = lightOnPlane.x;

				bool IntersectGround = RaySphereIntersectNearest(WorldPos, WorldDir, float3(0, 0, 0), Atmosphere.BottomRadius) >= 0.0f;

				SkyViewLutParamsToUv(Atmosphere, IntersectGround, viewZenithCosAngle, lightViewCosAngle, viewHeight, uv);

				output.Luminance = float4(SkyViewLutTexture.SampleLevel(samplerLinearClamp, uv, 0).rgb, 1.0);

				// Don't render sun in cube map as we dont want double specular reflections
				if (RenderStage == 0)
				{
					LutTransmittanceParamsToUv(Atmosphere, viewHeight, viewZenithCosAngle, uv);
					const float3 transmittance = TransmittanceLutTexture.SampleLevel(samplerLinearClamp, uv, 0).rgb;

					output.Luminance.xyz += GetSunLuminance(WorldDir, transmittance);
				}

				if (IntersectGround && RenderStage == 1)
				{
					output.Luminance = float4(GroundAlbedo, 1);
				}

				if (EnableClouds)
				{
					float4 clouds = CalculateClouds(CameraPositionWS, WorldDir, WorldPos, Atmosphere);
					output.Luminance.xyz = output.Luminance.xyz * (1.0f - clouds.a) + clouds.xyz * clouds.a;
					//output.Luminance.xyz = lerp(output.Luminance.xyz, 2, clouds);
				}

				return output;
			}
		}
		else
		{
			if (DepthBufferValue == 1.0f)
				L += GetSunLuminance(WorldDir, float3(1, 1, 1));
		}

		if (FastAerialPerspectiveEnabled)
		{
			ClipSpace = float3((pixPos / float2(Resolution)) * float2(2.0, -2.0) - float2(1.0, -1.0), DepthBufferValue);
			float4 DepthBufferWorldPos = mul(float4(ClipSpace, 1.0), InvViewProjectionMatrix);
			DepthBufferWorldPos /= DepthBufferWorldPos.w;

			DepthBufferWorldPos *= ScaleToSkyUnit;

			float tDepth = length(DepthBufferWorldPos.xyz - (WorldPos + float3(0.0, -Atmosphere.BottomRadius, 0.0)));
			float Slice = AerialPerspectiveDepthToSlice(tDepth);
			float Weight = 1.0;
			if (Slice < 0.5)
			{
				// We multiply by weight to fade to 0 at depth 0. That works for luminance and opacity.
				Weight = saturate(Slice * 2.0);
				Slice = 0.5;
			}
			float w = sqrt(Slice * AerialPerspectiveSlicesAndDistancePerSlice.z);	// squared distribution

			const float4 AP = Weight * AtmosphereCameraScatteringVolume.SampleLevel(samplerLinearClamp, float3(pixPos / float2(Resolution), w), 0);
			L.rgb += AP.rgb;
			float Opacity = AP.a;

			output.Luminance = float4(L, Opacity);
		}
		else
		{
			// Move to top atmosphere as the starting point for ray marching.
			// This is critical to be after the above to not disrupt above atmosphere tests and voxel selection.
			if (!MoveToTopAtmosphere(WorldPos, WorldDir, Atmosphere.TopRadius))
			{
				// Ray is not intersecting the atmosphere		
				output.Luminance = float4(GetSunLuminance(WorldDir, float3(1, 1, 1)), 1.0);
				return output;
			}

			const bool ground = false;
			const float SampleCountIni = 0.0f;
			const bool VariableSampleCount = true;
			const bool MieRayPhase = true;
			const float AerialPespectiveDistanceScale = DepthBufferValue == 1.0f ? 1.0f : Atmosphere.AerialPespectiveViewDistanceScale;

			SingleScatteringResult ss = IntegrateScatteredLuminance(pixPos, WorldPos, WorldDir, SunDirection, Atmosphere, ground, SampleCountIni, DepthBufferValue, VariableSampleCount, MieRayPhase, AerialPespectiveDistanceScale);

			L += ss.L;
			float3 throughput = ss.Transmittance;

			const float Transmittance = dot(throughput, float3(1.0f / 3.0f, 1.0f / 3.0f, 1.0f / 3.0f));
			output.Luminance = float4(L, 1.0f - Transmittance);
		}

		return output;
	}

    stage override void PSMain()
    {   
        streams.ColorTarget = _PSMain().Luminance;
    }
};
